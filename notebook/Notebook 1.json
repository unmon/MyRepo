{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "apsparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9ee1b94d-57d9-43ba-b017-bf595e7a03ba"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3e463c50-f4bf-4c51-a9f6-c64fcb641706/resourceGroups/RG_UNMON_MSDN/providers/Microsoft.Synapse/workspaces/azsynapsewp/bigDataPools/apsparkpool",
				"name": "apsparkpool",
				"type": "Spark",
				"endpoint": "https://azsynapsewp.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/apsparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"//import org.apache.spark.sql.SparkSession\r\n",
					"\r\n",
					"//val session = SparkSession.builder().getOrCreate()\r\n",
					"\r\n",
					"//val df = session.read.format(\"csv\").option(\"header\", true).load(\"abfs://sql@azsynapseacn.dfs.core.windows.net/Data.csv\")\r\n",
					"\r\n",
					"val df = spark.read.json(\"abfs://sql@azsynapseacn.dfs.core.windows.net/Data1.json\").select(\"Name\", \"employeeBranch\")\r\n",
					"\r\n",
					"df.show()\r\n",
					"\r\n",
					"//df.printSchema()\r\n",
					"\r\n",
					"//df.show(false)\r\n",
					"\r\n",
					"//df.createOrReplaceTempView(\"vw_CsvData\")\r\n",
					"\r\n",
					"//spark.sql(\"Select * From vw_CsvData\").show()\r\n",
					""
				],
				"execution_count": 64
			}
		]
	}
}